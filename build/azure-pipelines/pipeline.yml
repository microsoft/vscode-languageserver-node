###############################################################################################
#  Copyright (c) Microsoft Corporation. All rights reserved.
#  Licensed under the MIT License. See License.txt in the project root for license information.
###############################################################################################
name: $(Date:yyyyMMdd)$(Rev:.r)

pr: none

resources:
  repositories:
    - repository: templates
      type: github
      name: microsoft/vscode-engineering
      ref: main
      endpoint: Monaco

parameters:
  - name: quality
    displayName: Quality
    type: string
    default: latest
    values:
      - latest
      - next
  - name: publishTextDocument
    displayName: ðŸš€ Publish textDocument
    type: boolean
    default: false
  - name: publishTypes
    displayName: ðŸš€ Publish types
    type: boolean
    default: false
  - name: publishJsonrpc
    displayName: ðŸš€ Publish jsonrpc
    type: boolean
    default: false
  - name: publishProtocol
    displayName: ðŸš€ Publish protocol
    type: boolean
    default: false
  - name: publishServer
    displayName: ðŸš€ Publish server
    type: boolean
    default: false
  - name: publishClient
    displayName: ðŸš€ Publish client
    type: boolean
    default: false

variables:
  # TestAndPackage
  testAndPackageTextDocument: ${{ or(eq(parameters.publishTextDocument, true), eq(variables['Build.Reason'], 'IndividualCI')) }}
  testAndPackageTypes: ${{ or(eq(parameters.publishTypes, true), eq(variables['Build.Reason'], 'IndividualCI')) }}
  testAndPackageJsonrpc: ${{ or(eq(parameters.publishJsonrpc, true), eq(variables['Build.Reason'], 'IndividualCI')) }}
  testAndPackageProtocol: ${{ or(eq(parameters.publishProtocol, true), eq(variables['Build.Reason'], 'IndividualCI')) }}
  testAndPackageServer: ${{ or(eq(parameters.publishServer, true), eq(variables['Build.Reason'], 'IndividualCI')) }}
  testAndPackageClient: ${{ or(eq(parameters.publishClient, true), eq(variables['Build.Reason'], 'IndividualCI')) }}
  #Types
  ${{ if and(eq(variables.testAndPackageTypes, true), eq(variables.testAndPackageTextDocument, true)) }}:
    dependsOnTypes: textDocument
    publishDependsOnTypes: ${{ parameters.publishTextDocument }}
  # Jsonrpc
  ${{ if and(eq(variables.testAndPackageJsonrpc, true), eq(variables.testAndPackageTypes, true)) }}:
    dependsOnJsonrpc: types
    publishDependsOnJsonrpc: ${{ parameters.publishTypes }}
  ${{ elseif and(eq(variables.testAndPackageJsonrpc, true), eq(variables.testAndPackageTextDocument, true)) }}:
    dependsOnJsonrpc: textDocument
    publishDependsOnJsonrpc: ${{ parameters.publishTextDocument }}
  # Protocol
  ${{ if and(eq(variables.testAndPackageProtocol, true), eq(variables.testAndPackageJsonrpc, true)) }}:
    dependsOnProtocol: jsonrpc
    publishDependsOnProtocol: ${{ parameters.publishJsonrpc }}
  ${{ elseif and(eq(variables.testAndPackageProtocol, true), eq(variables.testAndPackageTypes, true)) }}:
    dependsOnProtocol: types
    publishDependsOnProtocol: ${{ parameters.publishTypes }}
  ${{ elseif and(eq(variables.testAndPackageProtocol, true), eq(variables.testAndPackageTextDocument, true)) }}:
    dependsOnProtocol: textDocument
    publishDependsOnProtocol: ${{ parameters.publishTextDocument }}
  # Server
  ${{ if and(eq(variables.testAndPackageServer, true), eq(variables.testAndPackageProtocol, true)) }}:
    dependsOnServer: protocol
    publishDependsOnServer: ${{ parameters.publishProtocol }}
  ${{ elseif and(eq(variables.testAndPackageServer, true), eq(variables.testAndPackageJsonrpc, true)) }}:
    dependsOnServer: jsonrpc
    publishDependsOnServer: ${{ parameters.publishJsonrpc }}
  ${{ elseif and(eq(variables.testAndPackageServer, true), eq(variables.testAndPackageTypes, true)) }}:
    dependsOnServer: types
    publishDependsOnServer: ${{ parameters.publishTypes }}
  ${{ elseif and(eq(variables.testAndPackageServer, true), eq(variables.testAndPackageTextDocument, true)) }}:
    dependsOnServer: textDocument
    publishDependsOnServer: ${{ parameters.publishTextDocument }}
  # Client
  ${{ if and(eq(variables.testAndPackageClient, true), eq(variables.testAndPackageServer, true)) }}:
    dependsOnClient: server
    publishDependsOnClient: ${{ parameters.publishServer }}
  ${{ elseif and(eq(variables.testAndPackageClient, true), eq(variables.testAndPackageProtocol, true)) }}:
    dependsOnClient: protocol
    publishDependsOnClient: ${{ parameters.publishProtocol }}
  ${{ elseif and(eq(variables.testAndPackageClient, true), eq(variables.testAndPackageJsonrpc, true)) }}:
    dependsOnClient: jsonrpc
    publishDependsOnClient: ${{ parameters.publishJsonrpc }}
  ${{ elseif and(eq(variables.testAndPackageClient, true), eq(variables.testAndPackageTypes, true)) }}:
    dependsOnClient: types
    publishDependsOnClient: ${{ parameters.publishTypes }}
  ${{ elseif and(eq(variables.testAndPackageClient, true), eq(variables.testAndPackageTextDocument, true)) }}:
    dependsOnClient: textDocument
    publishDependsOnClient: ${{ parameters.publishTextDocument }}

extends:
  template: azure-pipelines/npm-package/pipeline.yml@templates
  parameters:
    npmPackages:
      - ${{ if eq(variables.testAndPackageTextDocument, true) }}:
        - name: textDocument
          testPlatforms:
            - name: Linux
              nodeVersions:
                - 16.14.2
            - name: MacOS
              nodeVersions:
                - 16.14.2
            - name: Windows
              nodeVersions:
                - 16.14.2
          testSteps:
            - template: /build/azure-pipelines/templates/test-steps.yml@self
              parameters:
                package: textDocument
          buildSteps:
            - template: /build/azure-pipelines/templates/pack-steps.yml@self
              parameters:
                package: textDocument
          tag: ${{ parameters.quality }}
          publishPackage: ${{ parameters.publishTextDocument }}
          postPublishSteps:
            - template: /build/azure-pipelines/templates/postPublish-steps.yml@self
              parameters:
                package: textDocument
                quality: ${{ parameters.quality }}
          workingDirectory: $(Build.SourcesDirectory)/textDocument

      - ${{ if eq(variables.testAndPackageTypes, true) }}:
        - name: types
          dependsOn: ${{ variables.dependsOnTypes }}
          testSteps:
            - template: /build/azure-pipelines/templates/test-steps.yml@self
              parameters:
                package: types
          buildSteps:
            - template: /build/azure-pipelines/templates/pack-steps.yml@self
              parameters:
                package: types
          tag: ${{ parameters.quality }}
          publishPackage: ${{ parameters.publishTypes }}
          postPublishSteps:
            - template: /build/azure-pipelines/templates/postPublish-steps.yml@self
              parameters:
                package: types
                quality: ${{ parameters.quality }}
          publishDependsOn: ${{ variables.publishDependsOnTypes }}
          workingDirectory: $(Build.SourcesDirectory)/types

      - ${{ if eq(variables.testAndPackageJsonrpc, true) }}:
        - name: jsonrpc
          dependsOn: ${{ variables.dependsOnJsonrpc }}
          testPlatforms:
            - name: Linux
              nodeVersions:
                - 16.14.2
            - name: MacOS
              nodeVersions:
                - 16.14.2
            - name: Windows
              nodeVersions:
                - 16.14.2
          testSteps:
            - template: /build/azure-pipelines/templates/test-steps.yml@self
              parameters:
                package: jsonrpc
          buildSteps:
            - template: /build/azure-pipelines/templates/pack-steps.yml@self
              parameters:
                package: jsonrpc
          tag: ${{ parameters.quality }}
          publishPackage: ${{ parameters.publishJsonrpc }}
          publishDependsOn: ${{ variables.publishDependsOnJsonrpc }}
          postPublishSteps:
            - template: /build/azure-pipelines/templates/postPublish-steps.yml@self
              parameters:
                package: jsonrpc
                quality: ${{ parameters.quality }}
          workingDirectory: $(Build.SourcesDirectory)/jsonrpc

      - ${{ if eq(variables.testAndPackageProtocol, true) }}:
        - name: protocol
          dependsOn: ${{ variables.dependsOnProtocol }}
          testPlatforms:
            - name: Linux
              nodeVersions:
                - 16.14.2
            - name: MacOS
              nodeVersions:
                - 16.14.2
            - name: Windows
              nodeVersions:
                - 16.14.2
          testSteps:
            - template: /build/azure-pipelines/templates/test-steps.yml@self
              parameters:
                package: protocol
          buildSteps:
            - template: /build/azure-pipelines/templates/pack-steps.yml@self
              parameters:
                package: protocol
          tag: ${{ parameters.quality }}
          publishPackage: ${{ parameters.publishProtocol }}
          publishDependsOn: ${{ variables.publishDependsOnProtocol }}
          postPublishSteps:
            - template: /build/azure-pipelines/templates/postPublish-steps.yml@self
              parameters:
                package: protocol
                quality: ${{ parameters.quality }}
          workingDirectory: $(Build.SourcesDirectory)/protocol

      - ${{ if eq(variables.testAndPackageServer, true) }}:
        - name: server
          dependsOn: ${{ variables.dependsOnServer }}
          testPlatforms:
            - name: Linux
              nodeVersions:
                - 16.14.2
            - name: MacOS
              nodeVersions:
                - 16.14.2
            - name: Windows
              nodeVersions:
                - 16.14.2
          testSteps:
            - template: /build/azure-pipelines/templates/test-steps.yml@self
              parameters:
                package: server
          buildSteps:
            - template: /build/azure-pipelines/templates/pack-steps.yml@self
              parameters:
                package: server
          tag: ${{ parameters.quality }}
          publishPackage: ${{ parameters.publishServer }}
          publishDependsOn: ${{ variables.publishDependsOnServer }}
          postPublishSteps:
            - template: /build/azure-pipelines/templates/postPublish-steps.yml@self
              parameters:
                package: server
                quality: ${{ parameters.quality }}
          workingDirectory: $(Build.SourcesDirectory)/server

      - ${{ if eq(variables.testAndPackageClient, true) }}:
        - name: client
          dependsOn: ${{ variables.dependsOnClient }}
          testPlatforms:
            - name: Linux
              nodeVersions:
                - 16.14.2
            - name: MacOS
              nodeVersions:
                - 16.14.2
            - name: Windows
              nodeVersions:
                - 16.14.2
          testSteps:
            - template: /build/azure-pipelines/templates/test-steps.yml@self
              parameters:
                package: client
                script: all:pack
          buildSteps:
            - template: /build/azure-pipelines/templates/pack-steps.yml@self
              parameters:
                package: client
          tag: ${{ parameters.quality }}
          publishPackage: ${{ parameters.publishClient }}
          publishDependsOn: ${{ variables.publishDependsOnClient }}
          postPublishSteps:
            - template: /build/azure-pipelines/templates/postPublish-steps.yml@self
              parameters:
                package: client
                quality: ${{ parameters.quality }}
          workingDirectory: $(Build.SourcesDirectory)/client